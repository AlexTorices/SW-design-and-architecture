{
  "data": [
    {
      "id": 1,
      "question": "Is a general repeatable solution to a commonly occurring problem in software design.",
      "answer": "a.",
      "options": [
        {
          "text": "a. Design Pattern"
        },
        {
          "text": "b. Builder"
        },
        {
          "text": "c. Singleton"
        }
      ]

    },
    {
      "id": 2,
      "question": "Design patterns can speed up the development process by providing tested, proven development paradigms.",
      "answer": "a.",
      "options": [
        {
          "text": "a. True"
        },
        {
          "text": "b. False"
        }
      ]

    },
    {
      "id": 3,
      "question": "These design patterns are all about class instantiation.",
      "answer": "c.",
      "options": [
        {
          "text": "a. Facade"
        },
        {
          "text": "b. Iterator"
        },
        {
          "text": "c. Creational design pattern"
        }
      ]

    },
    {
      "id": 4,
      "question": "This pattern can be further divided into class-creation patterns and object-creational patterns.",
      "answer": "c.",
      "options": [
        {
          "text": "a. Abstract Factory"
        },
        {
          "text": "b. Observer pattern"
        },
        {
          "text": "c. Creational design pattern"
        }
      ]

    },

    {
      "id": 5,
      "question": "These patterns use inheritance effectively in the instantiation process.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Abstract Factory patterns"
        },
        {
          "text": "b. Class-creation patterns"
        },
        {
          "text": "c. Creational design patterns"
        }
      ]

    },

    {
      "id": 6,
      "question": "These patterns use delegation effectively to get the job done.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Class-creation patterns"
        },
        {
          "text": "b. Object-creation patterns"
        },
        {
          "text": "c. Creational design patterns"
        }
      ]

    },

    {
      "id": 7,
      "question": "Creates an instance of several families of classes.",
      "answer": "a.",
      "options": [
        {
          "text": "a. Abstract Factory"
        },
        {
          "text": "b. Object-creation patterns"
        },
        {
          "text": "c. Creational design patterns"
        }
      ]

    },

    {
      "id": 8,
      "question": "Separates object construction from its representation.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Object Pool"
        },
        {
          "text": "b. Builder"
        },
        {
          "text": "c. Abstract factory"
        }
      ]

    },

    {
      "id": 9,
      "question": "Creates an instance of several derived classes.",
      "answer": "c.",
      "options": [
        {
          "text": "a. CAbstract Method"
        },
        {
          "text": "b. Builder"
        },
        {
          "text": "c. Factory Method"
        }
      ]

    },

    {
      "id": 10,
      "question": "Avoid expensive acquisition and release of resources by recycling objects that are no longer in use.",
      "answer": "c.",
      "options": [
        {
          "text": "a. Builder"
        },
        {
          "text": "b. Object-creation patterns"
        },
        {
          "text": "c. Object Pool"
        }
      ]

    },

    {
      "id": 11,
      "question": "A fully initialized instance to be copied or cloned.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Class-creation patterns"
        },
        {
          "text": "b. Prototype"
        },
        {
          "text": "c. Creational design patterns"
        }
      ]

    },

    {
      "id": 12,
      "question": "A class of which only a single instance can exist.",
      "answer": "a.",
      "options": [
        {
          "text": "a. Singleton"
        },
        {
          "text": "b. Cingleton"
        },
        {
          "text": "c. Iteration"
        }
      ]

    },

    {
      "id": 13,
      "question": "These design patterns are all about Class and Object composition.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Class-creation patterns"
        },
        {
          "text": "b. Structural design patterns"
        },
        {
          "text": "c. Creational design patterns"
        }
      ]

    },

    {
      "id": 14,
      "question": "These patterns use inheritance to compose interfaces.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Structural object-patterns"
        },
        {
          "text": "b. Structural class-creation patterns"
        },
        {
          "text": "c. Structural patterns"
        }
      ]

    },

    {
      "id": 15,
      "question": "These patterns define ways to compose objects to obtain new functionality.",
      "answer": "a.",
      "options": [
        {
          "text": "a. Structural object-patterns"
        },
        {
          "text": "b. Structural class-creation patterns"
        },
        {
          "text": "c. Structural patterns"
        }
      ]

    },

    {
      "id": 16,
      "question": "Match interfaces of different classes.",
      "answer": "c.",
      "options": [
        {
          "text": "a. Bridge"
        },
        {
          "text": "b. Proxy"
        },
        {
          "text": "c. Adapter"
        }
      ]

    },

    {
      "id": 17,
      "question": "Separates an objectï¿½s interface from its implementation.",
      "answer": "c.",
      "options": [
        {
          "text": "a. Adapter"
        },
        {
          "text": "b. Compiler"
        },
        {
          "text": "c. Bridge"
        }
      ]

    },

    {
      "id": 18,
      "question": "A tree structure of simple and composite objects.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Bridge"
        },
        {
          "text": "b. Composite"
        },
        {
          "text": "c. Decorator"
        }
      ]

    },

    {
      "id": 19,
      "question": "Add responsibilities to objects dynamically.",
      "answer": "a.",
      "options": [
        {
          "text": "a. Decorator"
        },
        {
          "text": "b. Composite"
        },
        {
          "text": "c. Bridge"
        }
      ]

    },

    {
      "id": 20,
      "question": "A single class that represents an entire subsystem.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Class"
        },
        {
          "text": "b. Facade"
        },
        {
          "text": "c. Proxy"
        }
      ]

    },

    {
      "id": 21,
      "question": "A fine-grained instance used for efficient sharing.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Class"
        },
        {
          "text": "b. Flyweight"
        },
        {
          "text": "c. Proxy"
        }
      ]

    },

    {
      "id": 22,
      "question": "Restricts accessor/mutator access.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Class-creation patterns"
        },
        {
          "text": "b. Private Class Data"
        },
        {
          "text": "c. Creational design patterns"
        }
      ]

    },

    {
      "id": 23,
      "question": "An object representing another object.",
      "answer": "c.",
      "options": [
        {
          "text": "a. Class"
        },
        {
          "text": "b. Object"
        },
        {
          "text": "c. Proxy"
        }
      ]

    },

    {
      "id": 24,
      "question": "Patterns that are most specifically concerned with communication between objects.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Class-creation patterns"
        },
        {
          "text": "b. Behavioral design patterns"
        },
        {
          "text": "c. Creational design patterns"
        }
      ]

    },

    {
      "id": 25,
      "question": "A way of passing a request between a chain of objects",
      "answer": "c.",
      "options": [
        {
          "text": "a. Behavioral design patterns"
        },
        {
          "text": "b. Object-creation patterns"
        },
        {
          "text": "c. Chain of responsability"
        }
      ]

    },

    {
      "id": 26,
      "question": "Encapsulate a command request as an object",
      "answer": "b.",
      "options": [
        {
          "text": "a. Mediator"
        },
        {
          "text": "b. Command"
        },
        {
          "text": "c. Iterator"
        }
      ]

    },

    {
      "id": 27,
      "question": "A way to include language elements in a program",
      "answer": "a.",
      "options": [
        {
          "text": "a. Interpreter"
        },
        {
          "text": "b. Iterator"
        },
        {
          "text": "c. Mediator"
        }
      ]

    },

    {
      "id": 28,
      "question": "Sequentially access the elements of a collection.",
      "answer": "c.",
      "options": [
        {
          "text": "a. Iterator"
        },
        {
          "text": "b. Interpreter"
        },
        {
          "text": "c. Iterator"
        }
      ]

    },

    {
      "id": 29,
      "question": "Defines simplified communication between classes.",
      "answer": "c.",
      "options": [
        {
          "text": "a. Interpreter"
        },
        {
          "text": "b. Iterator"
        },
        {
          "text": "c. Mediator"
        }
      ]

    },

    {
      "id": 30,
      "question": "Capture and restore an object's internal state.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Class"
        },
        {
          "text": "b. Memento"
        },
        {
          "text": "c. Mediator"
        }
      ]

    },

    {
      "id": 31,
      "question": "Designed to act as a default value of an object.",
      "answer": "b.",
      "options": [
        {
          "text": "a. No object"
        },
        {
          "text": "b. Null object"
        },
        {
          "text": "c. Null"
        }
      ]

    },

    {
      "id": 32,
      "question": "A way of notifying change to a number of classes.",
      "answer": "a.",
      "options": [
        {
          "text": "a. Observer"
        },
        {
          "text": "b. Supervisor"
        },
        {
          "text": "c. Look"
        }
      ]

    },

    {
      "id": 33,
      "question": "Alter an object's behavior when its state changes.",
      "answer": "c.",
      "options": [
        {
          "text": "a. Class"
        },
        {
          "text": "b. Object"
        },
        {
          "text": "c. State"
        }
      ]

    },

    {
      "id": 34,
      "question": "Encapsulates an algorithm inside a class.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Class"
        },
        {
          "text": "b. Strategy"
        },
        {
          "text": "c. State"
        }
      ]

    },

    {
      "id": 35,
      "question": "Defer the exact steps of an algorithm to a subclass.",
      "answer": "a.",
      "options": [
        {
          "text": "a. Template method"
        },
        {
          "text": "b. Observer method"
        },
        {
          "text": "c. Creational method"
        }
      ]

    },

    {
      "id": 36,
      "question": "Defines a new operation to a class without change.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Observer"
        },
        {
          "text": "b. Visitor"
        },
        {
          "text": "c. Supervisor"
        }
      ]

    },

    {
      "id": 37,
      "question": "Is a literary form that describes a commonly occurring solution to a problem that generates decidedly negative consequences.",
      "answer": "a.",
      "options": [
        {
          "text": "a. AntiPattern"
        },
        {
          "text": "b. Object-creation patterns"
        },
        {
          "text": "c. Creational design patterns"
        }
      ]

    },

    {
      "id": 38,
      "question": "Is a form of code modification, used to improve the software structure in support of subsequent extension and long-term maintenance.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Class-creation refactoring"
        },
        {
          "text": "b. Software refactoring"
        },
        {
          "text": "c. Creational design refactoring"
        }
      ]

    },

    {
      "id": 39,
      "question": "Focus on the system-level and enterprise-level structure of applications and components.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Class-creation AntiPatterns"
        },
        {
          "text": "b. Software Architecture AntiPatterns"
        },
        {
          "text": "c. Software Project management AntiPatterns"
        }
      ]

    },

    {
      "id": 40,
      "question": "Identify some of the key scenarios in which these issues are destructive to software processes.",
      "answer": "a.",
      "options": [
        {
          "text": "a. Software Project management AntiPatterns"
        },
        {
          "text": "b. Software Architecture AntiPatterns"
        },
        {
          "text": "c. Creational design AntiPatterns"
        }
      ]

    },

    {
      "id": 41,
      "question": "These are refactoring approaches for Development antipatterns, select the one that is NOT",
      "answer": "b.",
      "options": [
        {
          "text": "a. Poltergeists"
        },
        {
          "text": "b. The Job"
        },
        {
          "text": "c. Spaghetti Code"
        }
      ]

    },

    {
      "id": 42,
      "question": "hese are antiPatterns that focus on some common problems and mistakes in the creation, implementation, and management of architecture, select the one that is NOT",
      "answer": "a.",
      "options": [
        {
          "text": "a. Cover your access"
        },
        {
          "text": "b. Jumble"
        },
        {
          "text": "c. Design by Committee"
        }
      ]

    },

    {
      "id": 43,
      "question": "These are antiPatterns that focus on management , select the one that is NOT",
      "answer": "c.",
      "options": [
        {
          "text": "a. Viewgraph Engineering"
        },
        {
          "text": "b. Blowhard Jamboree"
        },
        {
          "text": "c. Cooper Engineering"
        }
      ]

    },

    {
      "id": 44,
      "question": "A change made to the internal structure of software to make it easier to understand and cheaper to modify without changing its observable behavior.",
      "answer": "b.",
      "options": [
        {
          "text": "a. Design"
        },
        {
          "text": "b. Refactoring"
        },
        {
          "text": "c. Create"
        }
      ]

    },

    {
      "id": 45,
      "question": "Refactoring makes software difficult to understand and does not help to code faster.",
      "answer": "b.",
      "options": [
        {
          "text": "a. True"
        },
        {
          "text": "b. False"
        }
      ]

    },

    {
      "id": 46,
      "question": "These are examples for when you should refactor except one.",
      "answer": "c.",
      "options": [
        {
          "text": "a. When you need to add a bug"
        },
        {
          "text": "b. As you do a code review"
        },
        {
          "text": "c. To compile"
        }
      ]

    },

    {
      "id": 47,
      "question": "Are name, summary, motivation, mechanics, and examples part of the format of refactoring?",
      "answer": "b.",
      "options": [
        {
          "text": "a. False"
        },
        {
          "text": "b. True"
        }

      ]

    },

    {
      "id": 48,
      "question": "Modifying the aggregate object while iterating over it is the most common problem associated with the iterator pattern.",
      "answer": "a.",
      "options": [
        {
          "text": "a. True"
        },
        {
          "text": "b. False"
        },
        {
          "text": "c. Maybe"
        }
      ]

    },

    {
      "id": 49,
      "question": "The FXRuby GUI library uses extensively which design pattern?",
      "answer": "b.",
      "options": [
        {
          "text": "a. Iterator"
        },
        {
          "text": "b. Composite"
        },
        {
          "text": "c. Creational"
        }
      ]

    },

    {
      "id": 50,
      "question": "When you use refactoring to develop software, you divide your time between two distinct activities (adding function and refactoring). This is known as:",
      "answer": "a.",
      "options": [
        {
          "text": "a. Two Hats"
        },
        {
          "text": "b. A composite"
        },
        {
          "text": "c. The great"
        }
      ]

    }

  ]

}